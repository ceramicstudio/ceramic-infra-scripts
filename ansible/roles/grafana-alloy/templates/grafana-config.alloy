// For a full configuration reference, see https://grafana.com/docs/alloy
logging {
  level  = "info"
  format = "logfmt"
}

prometheus.exporter.unix "default" {
  include_exporter_metrics = true
  disable_collectors       = [
    "arp",
    "bcache",
    "bonding",
    "btrfs",
    "mdadm",
    "nfs",
    "nfsd",
    "powersupplyclass",
    "thermal_zone",
    ]
}

prometheus.scrape "default" {
  targets = concat(
    prometheus.exporter.unix.default.targets,
    [{
      // Self-collect metrics
      job         = "alloy",
      __address__ = "127.0.0.1:12345",
    }],
  )
  forward_to = [prometheus.relabel.replace_instance_with_hostname.receiver]
}

{% if ('go-proxy' is not in group_names) and ('js-ceramic' in inventory_hostname) %}
prometheus.scrape "js_ceramic" {
  targets = [
    {"job" = "js-ceramic", "__address__" = "127.0.0.1:9464"},
  ]
  forward_to = [prometheus.relabel.replace_instance_with_hostname.receiver]
}
{% endif %}

{% if 'go-proxy' in group_names %}
prometheus.scrape "go_proxy" {
  targets = [
    {"job" = "go-proxy", "__address__" = "127.0.0.1:9464"},
  ]
  forward_to = [prometheus.relabel.replace_instance_with_hostname.receiver]
}
{% endif %}

{% if 'rust-ceramic' in inventory_hostname %}
prometheus.scrape "rust_ceramic" {
  targets = [
      {"job" = "rust-ceramic", "__address__" = "127.0.0.1:9465"},
  ]
  forward_to = [prometheus.relabel.replace_instance_with_hostname.receiver]
}
{% endif %}

{% if 'go-ipfs' in inventory_hostname %}
prometheus.scrape "go_ipfs" {
  metrics_path = "/debug/metrics/prometheus"
  targets = [
      {"job" = "go-ipfs", "__address__" = "127.0.0.1:5101"},
  ]
  forward_to = [prometheus.relabel.replace_instance_with_hostname.receiver]
}
{% endif %}

prometheus.remote_write "grafana_cloud_prometheus" {
	// https://grafana.com/docs/agent/latest/flow/reference/components/prometheus.remote_write/
	endpoint {
		url = "https://prometheus-us-central1.grafana.net/api/prom/push"

		basic_auth {
			username = env("GRAFANA_PROM_USERNAME")
			password = env("GRAFANA_PROM_PASSWORD")
		}
	}
}

prometheus.relabel "replace_instance_with_hostname" {
  forward_to = [prometheus.remote_write.grafana_cloud_prometheus.receiver]

  rule {
    action        = "replace"
    source_labels = ["__address__"]
    target_label  = "instance"
    replacement   = "{{ inventory_hostname }}"
  }
}

loki.relabel "journal" {
  forward_to = []
  rule {
    source_labels = ["__journal__systemd_unit"]
    target_label  = "unit"
  }
  rule {
    action        = "drop"
    source_labels = ["unit"]
    regex         = "sshd"
  }
  rule {
    action        = "replace"
    source_labels = ["__address__"]
    target_label  = "instance"
    replacement   = "{{ inventory_hostname }}"
  }
}

loki.source.journal "read"  {
  forward_to    = [loki.write.endpoint.receiver]
  relabel_rules = loki.relabel.journal.rules
  labels        = {component = "loki.source.journal"}
}

loki.write "endpoint" {
  endpoint {
    url = "https://{{grafana_loki_username}}:{{grafana_loki_password}}@logs-prod3.grafana.net/loki/api/v1/push"
  }
}
